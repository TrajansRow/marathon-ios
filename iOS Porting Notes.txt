----- A list of hacks and modifications needed to port Aleph One source files to iOS. -----

These are the steps followed to rebase the entire engine from Aleph One into a form that will run as the iOS port.


***Prep Dependencies***

Resync vcpkg.json, and build dependencies with the iOS arm community triplet.


~~~~~ Update the Xcode project with new source ~~~~~

Remove folder references to Source_Files from the Xcode project
Replace AlephOneSDL/Source_Files with the latest from the Aleph One project, and switch to the OGL ES branch with "git checkout opengl-es-renderer"

Drop the new Source_Files into the Xcode project sidebar. DO NOT create an external build system!

Use "Create Groups", and check all targets.

Remove References to the RenderMain/Shaders directory in the Xcode sidebar, and drop the real Shaders directly in as a Folder Reference. Do not add to any targets!


***Remove unwanted source files***

From the new source tree, sort all of the subfolders by name. Then Remove References to these files from everywhere: 
	- Makefile.am
	- COPYING
	- README
	- COPYRIGHT
	- buildprogram
	- thread_priority_sdl_win32
	- thread_priority_sdl_posix
	- thread_priority_sdl_dummy
	- network_dummy.cpp
	- csalerts.mm
	- StandaloneHub (the entire folder)
	- main.cpp (Make sure nothing new and important is in here)


~~~~~ Code changes to enable build ~~~~~

***Crib main event loop***

We need a copy of the main event loop to run without the enclosing infinite while loop. Look in shell.cpp->void main_event_loop(void), and grab the inner contents of the "while ((game_state = get_game_state()) != _quit_game)" loop, and paste it into the void AlephOneMainLoop() function in AlephOneShell.cpp

Remove these lines, and make sure they are OUTSIDE of the AlephOneMainLoop() definition:
	uint32 last_event_poll = 0;
	short game_state;

It should look something like this:

...
//last_event_poll and game_state need to be outside this scope, otherwise 3D sounds and console keys won't work.
uint32 last_event_poll = 0;
short game_state = 0;
void AlephOneMainLoop()
{
...

If you don't do the above, stereo sounds will not update panning and the console and stats keys won't work!



***See notes on commenting out SDL_WaitEventTimeout below!!!



***Update OpenGL Headers for ES

If not using ANGLE, swap in the needed OpenGL and GLES headers in OGL_Headers.h for "__APPLE__". Should look something like this:

#ifdef __APPLE__
#ifndef GL_GLEXT_PROTOTYPES
#define GL_GLEXT_PROTOTYPES 1
#endif

#include "SDL2/SDL_opengl.h"

	//OpenGL ES headers needed on iOS
#include <OpenGLES/ES1/gl.h>
#include <OpenGLES/ES2/gl.h>
#include <OpenGLES/ES3/gl.h>
typedef double GLdouble; //Added for iOS by SDL_opengl_glext.h
typedef double GLclampd; //Added for iOS by SDL_opengl_glext.h
#include "SDL2/SDL_opengl_glext.h" //Added for iOS
#include "SDL2/SDL_opengles.h"
#endif


***Tweak luai_system() function

In lauxlib.c, set this in "int luai_system(const char* command) {":
#ifdef __APPLE__
		#include "TargetConditionals.h"
		#ifdef TARGET_OS_IOS
			return 0;
		#else
			return system(command);
		#endif
#endif


***Replace Cocoa.h imports

In cspaths, csalerts or anywhere that includes Cocoa.h, replace the #import with::
#ifdef __APPLE__
		#include "TargetConditionals.h"
		#ifdef TARGET_OS_IOS
			#import <UIKit/UIKit.h>
		#else
			#import <Cocoa/Cocoa.h>
		#endif
#endif


***Return a workable application name

In cspaths.mm, return a static name for now:std::string get_application_name() like this:
#ifdef TARGET_OS_IOS
	return A1_DISPLAY_NAME;
#else
	***Leave existing code here!
#endif

Also, add #include "alephversion.h" to the top of that file.


***Add version import to shell?

Add this to the top of shell.cpp:
#include "alephversion.h"


***Fix #include in Pinger

Change the AStream.h include to quotes, like this:
#include "AStream.h"


***Add definition for useSGISMipmaps

Before any checks for useSGISMipmaps in OGL_Textures.cpp (about six places), add:
#ifdef TARGET_OS_IOS
				bool useSGISMipmaps=0;
#endif


***Add game saving declarations

In QuickSave.h, add these before the final #endif:
//Used for iOS port
std::string build_save_metadata(QuickSave& save);
bool build_map_preview(std::ostringstream& ostream);

In QuickSaver.cpp, change this to non-static:
bool build_map_preview(std::ostringstream& ostream)


***Fix other missing static symbols

Make BOTH of these non-static in shell.cpp:
//Changed to non-static for iOS port
void process_event(const SDL_Event &event)

In devices.cpp, change BOTH line_is_within_range to non-static:
//Changed to non-static for iOS port
bool line_is_within_range(



~~~~~ Code changes to enable iOS interface hooks and capabilities ~~~~~

***Know how to add the Helper header.
Many of the following changes need the AlephOneHelper.h header for various hooks. When needed, simply add this to the top of relevant files:
#include "AlephOneHelper.h" //Needed for iOS port


***Change default Data Directory

In shell.cpp, add the Helper header and then right before "const string data_env = a1_getenv("ALEPHONE_DATA");", change default_data_dir using (also include the healer header file): 
#if TARGET_OS_IPHONE
	//iOS directory override
	default_data_dir = getDataDir();
	local_data_dir = getLocalDataDir();
	//log_dir = getLocalTmpDir(); //This is not great because the log file grows forever. Commenting out.
#endif

***Enable console and stats keys

In shell.cpp-> handle game key, change:

		else if (input_preferences->shell_key_bindings[_key_show_scores].count(sc) || key == SDLK_1) //iOS needs check for || key == SDLK_1


And:
		else if (input_preferences->shell_key_bindings[_key_activate_console].count(sc) || key == SDLK_BACKSLASH ) //iOS needs check for || key == SDLK_BACKSLASH



***Force OpenGL ES 3.0

Add these in screen.cpp->change_screen_mode() for __APPLE__ right after "SDL_GL_SetAttribute(SDL_GL_CONTEXT_PROFILE_MASK, SDL_GL_CONTEXT_PROFILE_ES);":

				// For iOS, force OpenGL ES 3.x. The default would otherwise be ES 2.
				SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 3);
				SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 0);


***Enable HUD overlay

In interface.cpp->start_game(), add the Helper header and then add this to the end of the function:
	//Bring up the iOS HUD
	helperBringUpHUD();


***Enable starting new games

Apply this in interface.cpp:
case mInterface:
			switch(menu_item)
			{
				case iNewGame:
					// iOS Start a new game with a dialog!
					if ( helperNewGame() ) {
						begin_game(_single_player, cheat);
					}

Also, in begin_game(), right before "// ZZZ: let the user use his behavior modifiers in single-player." Add this:
			// iOS set custom entry level number
			entry.level_number = helperGetEntryLevelNumber();


***Disable SDL controller init

In joystick_sdl.cpp, at the top of joystick_added() add:
	//On iOS, we handle the joystick elsewhere - double input is not ideal and may cause jitter. Just return.
	return;


***Fix weird resolution limits

In screen.cpp, change the line "if (desktop.w >= 640 && desktop.h >= 480)" to:  
			if (desktop.w >= 640/2 && desktop.h >= 480/2) //DCW divided original values by two for iOS, since retina displays have a smaller dimension in points than the native resolution.

Also maybe change: 
int Screen::window_height()
{
	return std::max(static_cast<short>(480/2), screen_mode.height); //DCW added /2 due to this probably being a retina display on iOS
}

int Screen::window_width()
{
	return std::max(static_cast<short>(640/2), screen_mode.width);  //DCW added /2 due to this probably being a retina display on iOS
}


***If games are only rendering a black screen by now, fix issue with default framebuffer. Maybe the main GLES branch should do this, too?

In OGL_FBO.cpp->FBO::deactivate(), change the final glBindFramebuffer to:
		//Binding to framebuffer 0 doesn't switch to the on-screen buffer on iOS.
		//Instead of 0, default to 1.
		if ( prev_fbo == 0 ) {
			glBindFramebuffer(GL_FRAMEBUFFER, 1);
			glBindRenderbuffer(GL_RENDERBUFFER, 1);
		} else {
			glBindFramebuffer(_fboTarget, prev_fbo);
		}



~~~~~ At this point, you should be able to start a game and see stuff rendered on the screen. ~~~~~
~~~~~ Let's do some more gameplay and preference hooks! ~~~~~


***Enable mouselook input from touches

In mouse_sdl.cpp-> enter_mouse(), add the Helper header and add this right after "MainScreenCenterMouse();":
		//Clear mouse deltas to avoid a large initial jump on iOS.
		float dx, dy;
		slurpMouseDelta(&dx, &dy);


And add this to mouse_idle() right after "snapshot_delta_y = 0;":    
		//iOS touch input bypass
		slurpMouseDelta(&dx, &dy);
		if(dx>0 || dy>0)
		{
			snapshot_delta_x = 0;
			snapshot_delta_y = 0;
		}


***Enable virtual keymap overlay

In vbl.cpp->parse_keymap(), add the Helper header and replace the innermost condition I "// Parse the keymap" with:
				if (key_map[code] || fake_key_map[code]) //iOS virtual input uses fake_key_map

Also, right after "if (player_in_terminal_mode(local_player_index))", change the flag assignment to:
flags = build_terminal_action_flags((char *)/*key_map*/fake_key_map); //iOS changed to fake_key_map


In preprocess_map_sdl.cpp, att the #include "AlephOneHelper.h" header and override save_game with:
bool save_game(void)
{
	//On iOS, just save with current saved game by calling the helper
	helperSaveGame();
	return true;


***Enable custom load and restore functionality

In interface, add the Helper header and then override handle_load_game with:
void handle_load_game(
	void)
{
  // On iOS, just call helper function
  helperHandleLoadGame();
  return;

In should_restore_network_game_networked() right before "if(d.run() == 0)" near the end of the function, return early with:
	//iOS TODO: Test enable multiplayer restore. Currently, the dialog may not be shown.
	if(dynamic_world->player_count != 0) {
		switchToSDLMenu();
	}
	return theRestoreAsNetgameToggle->get_selection(); //iOS restore override


***Enable user-friendly keyboard input

In Console.cpp, add the Helper header and override the keyboard input in Console::activate_input (before SDL_StartTextInput()) like this:
	//Alternate iOS Keyboard input.
	if(game_is_networked)
		getSomeTextFromIOS("Chat", "");
	else
		getSomeTextFromIOS("Console", "");
	return;

Do the same in sdl_widgets.cpp->w_text_entry::click() add this right away:
	//This might be a good place to handle text input differently on iOS.
	char *label = this->associated_label->text;
	const char *currentText = this->get_text();
	get_owning_dialog()->activate_widget(this);
		//If this widget can't activate, don't ask for input.
	if(active) {
		dirty = true;
		getSomeTextFromIOS(label, currentText);
		this->set_text("");
	}
	return;

For the above to work, modify "class w_static_text : public widget" in sdl_widgits.h:
	char *text; // Make not protected for iOS
protected:
	//char *text; // Make not protected for iOS

Also in sdl_widgets.cpp->void w_text_entry::set_active(bool new_active), disable the SDL keyboard by commenting out "SDL_StartTextInput()":
		//SDL_StartTextInput(); //When using the iOS keyboard input helper, we only want to listen for input here and not display the keyboard (which SDL_StartTextInput does).


***Avoid using a generic player name in net games

In networkdialogs.cpp add the Helper header, then in both JoinDialog::JoinNetworkGameByRunning () and SetupNetgameDialog::SetupNetworkGameByRunning (right after CStringPref namePref (player_preferences->name, MAX_NET_PLAYER_NAME_LENGTH);)...  Add these lines:

	//On iOS if we get a generic mobile name from the system, replace it with something random.
	if(strcmp(player_preferences->name, "mobile") == 0){
		namePref.bind_import(randomName31());
	}


***Override plugins to control texture sets

In Plugins.cpp->Plugin::valid() add the Helper header, and then add the iOS plugin filters to Plugin::valid() (right after the !enabled check):
	//Plugin filters for iOS
	if(useClassicVisuals()) {
		if(
				//M1
				strcmp(name.c_str(), "TTEP v7") == 0 ||
				strcmp(name.c_str(), "TTEP") == 0 ||
				strcmp(name.c_str(), "Updated Starscape") == 0 ||
				strcmp(name.c_str(), "M1 Hd Weapon Pack") == 0 ||
			 
				//M2
				strcmp(name.c_str(), "HD Monsters") == 0 ||
				strcmp(name.c_str(), "HD Textures") == 0 ||
			 
				//M2&M3
				strcmp(name.c_str(), "HD Weapons") == 0 ||
			 
				//Any CFP
				strncmp(name.c_str(), "CFP", 3) == 0 ||
			 
				//Any 4096
				strncmp(name.c_str(), "4096", 4) == 0 ||
			 
				//Any Gorans
				strncmp(name.c_str(), "Gorans", 6) == 0 
				) {
			return false;
		}
	}


***Allow the visual style to override map appearance

In screen.cpp->map_is_translucent(void), add the Helper header and change the function to:
	return ( (screen_mode.translucent_map || true) && NetAllowOverlayMap()); //iOS should always use translucent map, bnecause the opaque version sometimes is very slow to refresh for some reason.

***Override preferences with custom options

In preferences.cpp->graphics_preferences_tree(), add the Helper header. Right before "InfoTree tex;" add these:

		//Apply iOS texture filtering
		if(useClassicVisuals()){
			Config.FarFilter=2;
			Config.NearFilter=2;
		} else {
			Config.FarFilter=1;
			Config.NearFilter=1;
		}
		
#if SCENARIO == 1
			//Inhabitant textures are always GL_NEAREST_MIPMAP_NEAREST because we currently don't have HD textures for M1, and blurry sprites look bad.
		if (i == OGL_Txtr_Inhabitant) {
			Config.FarFilter=2;
			Config.NearFilter=2;
		}
#endif

		//Override gamma levels for iOS
		graphics_preferences->screen_mode.gamma_level = helperGamma();

		//For iOS, use 3D perspective
		graphics_preferences->OGL_Configure.Flags &= ~OGL_Flag_MimicSW;
		
		//For iOS, always enable blur/bloom. We can still skip the bloom pass later based on prefs.
		graphics_preferences->OGL_Configure.Flags |= OGL_Flag_Blur;
		
		//For iOS, enable bump mapping as desired
		if (useBumpMapping()) {
			graphics_preferences->OGL_Configure.Flags |= OGL_Flag_BumpMap;
		} else {
			graphics_preferences->OGL_Configure.Flags &= ~OGL_Flag_BumpMap;
		}
		
		//for iOS, set FPS target higher
		graphics_preferences->fps_target = iOSFPSTarget();
		graphics_preferences->OGL_Configure.WaitForVSync = 1;
		
		//Show iOS FPS if desired.
		extern bool displaying_fps;
		displaying_fps = showiOSFPS();

		//Temporary workaround for Remote Hub to work on iOS. Future engine versions will probably not need this
		//Badly breaks M1 game state, so we don't use it for that (nor does it seem needed)
		#if SCENARIO != 1
		FileSpecifier physFile = getPhysicsFilePath();
		set_physics_file(physFile);
		#endif

Also in parse_input_preferences, add this right after "root.read_attr("controller_deadzone", input_preferences->controller_deadzone);"

	//On iOS, always use extra mouse precision
	input_preferences->extra_mouse_precision = true;


Also in sound_preferences_tree(), add this to the end:

		//On iOS, always enable 3D audio and HRTF
	sound_preferences->flags |= _3d_sounds_flag;
	sound_preferences->flags |= _hrtf_flag;
	setVolumeAndRefreshSound();



***Override bloom blur pass

In RenderRasterize_shader -> render_tree(), add the Helper header and then change the blur conditional to:
	//On iOS, we also consider useShaderPostProcessing() as an override
	if (useShaderPostProcessing() && current_player->infravision_duration == 0 &&
		TEST_FLAG(Get_OGL_ConfigureData().Flags, OGL_Flag_Blur) &&
		blur.get())


***Change format of FPS display

In screen_shared_h -> update_fps_display(), add the Helper header and then add eight spaces in front of the fps string so that it isn't cut off by rounded corner displays:
			sprintf(fps, "        %0.f/%0.f fps %s", fps_counter.get(), CAFrameRate(), ms); //On iOS, shift right to avoid rounded corners and also add CA refresh.

To avoid crashes, also increase the size of the string used by adding a bunch of spaces to it:
		char fps[sizeof("1000 fps (10000 ms)                        ")]; //For the iOS version, pad with an extra 24 spaces or so



***Enable smart trigger

In scottish_textures.h, add this near the end (just before constructor) for rectangle_definition:
bool isLivingMonster; //iOS smart trigger hint

In RenderPlaceObjs.cpp , add this near the top:
#include "monsters.h" //Needed for iOS smart trigger

Then also add this in build_render_object(), right after "render_object= &RenderObjects[Length];":
				//Set iOS smart trigger hint
				render_object->rectangle.isLivingMonster= 0;
				if (GET_OBJECT_OWNER(object) == _object_is_monster)
				{
					struct monster_data *monster= get_monster_data(object->permutation);
					if (monster && !MONSTER_IS_DYING(monster)) {
						render_object->rectangle.isLivingMonster=1;
					}
				}


In RenderRasterizeShader->_render_node_object_helper() add the Helper header, and then add this before the FIRST "DC()->addTriangleFan(4, vertex_array, texcoord_array, NULL);" call:
	//iOS Smart trigger.
	GLfloat spriteOnScreen[12] = {vertex_array[0], vertex_array[1], vertex_array[2],
																vertex_array[3], vertex_array[4], vertex_array[5],
																vertex_array[6], vertex_array[7], vertex_array[8],
																vertex_array[9], vertex_array[10], vertex_array[11]};
		//Convert sprite coordinates to screen coordinates. Hopefully the right matrix is enabled, otherwise this would behave strangely.
	MatrixStack::Instance()->transformVertex(spriteOnScreen[0], spriteOnScreen[1], spriteOnScreen[2]);
	MatrixStack::Instance()->transformVertex(spriteOnScreen[3], spriteOnScreen[4], spriteOnScreen[5]);
	MatrixStack::Instance()->transformVertex(spriteOnScreen[6], spriteOnScreen[7], spriteOnScreen[8]);
	MatrixStack::Instance()->transformVertex(spriteOnScreen[9], spriteOnScreen[10], spriteOnScreen[11]);
		//Sprite is centered horizontally if index 0 and 3 are different signs.
		//Sprite is centered vertically if index 4 and 7 are different signs.
	if( rect.isLivingMonster ) {
		if ( (spriteOnScreen[0] >= 0 && spriteOnScreen[3] <= 0) || (spriteOnScreen[0] <= 0 && spriteOnScreen[3] >= 0) ) {
				if ( (spriteOnScreen[4] >= 0 && spriteOnScreen[7] <= 0) || (spriteOnScreen[4] <= 0 && spriteOnScreen[7] >= 0) ) {
						monsterIsCentered();
				}
		}
	}

Finally, in screen.cpp -> render_screen(), right before "// Render world view", call this:
clearSmartTrigger(); //Reset iOS smart trigger


***Make net game stats work

In interface.cpp, Replace both instances of "display_net_game_stats()" with:
			display_net_game_stats_helper(); //iOS needs to handle hiding the HUD before showing netstats.


***Add Local IP address to the gather dialog

In network_dialogs.cpp, in SdlGatherDialog(), replace the line "autogather_placer->dual_add(autogather_w->label("Auto-Gather"), m_dialog);" with:

		autogather_placer->dual_add(autogather_w->label(LANIP("Local IP: ", "           Auto-Gather:")), m_dialog); //On iOS, inject the local IP also.


***Set recommended QoS settings

In network_udp.cpp

Add the include:
#include <sys/socket.h> //Needed for setting QOS on iOS


At the top of receive_thread_function(void*), add:
pthread_set_qos_class_self_np(QOS_CLASS_USER_INTERACTIVE,0); //Set interactive QoS for iOS

In NetDDPOpenSocket(), right before "// Set up socket set" add this:

				//Set an appropriate network socket service type for iOS. First connection listening when hosting.
				int	theSocketFD = ((int*)sSocket)[1];
				int st = NET_SERVICE_TYPE_VO;
				setsockopt(theSocketFD, SOL_SOCKET, SO_NET_SERVICE_TYPE, (void *)&st, sizeof(st));


In ViewControl.cpp->View_AdjustFOV(), add the Helper header then this line at the top:
	FOV_Target += extraFieldOfView();


***Disable miniupnpc

In config.h, undefine these (actually, maybe not needed...):

/* ${desc_miniupnpc} enabled */
#define HAVE_MINIUPNPC 0

/* Define to 1 if you have the <miniupnpc/miniupnpc.h> header file. */
#define HAVE_MINIUPNPC_MINIUPNPC_H 0


***Enable hiding of HUD and controls for cinematic recording
In screen.cpp->render_screen(), in the OpenGL version of DrawHUD, add a conditional of:
#ifdef HAVE_OPENGL
		if (Screen::instance()->hud() && !shouldHideHud()) {




~~~~~ All Done! Good luck and have fun! ~~~~~


*****TODOs!*****


***Prevent last_event_poll = 0; from getting reset on each frame!

***Figure out why SDL_WaitEventTimeout() in AlephOneShell.cpp->AlephOneMainLoop() causes slow frame rates in Release builds. Is temporarily commented out.


***Add check for allow local network connections permission in the app, because denying this can cause a silent failure to find net games. '"Infinity" would like to find and connect to devices on your local network.'

Fix weapons reticle refresh check
Add in switchToSDLMenu(); and display_net_game_stats_helper() stuff!

Try removing ffmpeg from vcpkg build.

Determine if changing 1 to _fbo here is correct:
  glBindFramebuffer(GL_FRAMEBUFFER, _fbo);
  glBindRenderbuffer(GL_RENDERBUFFER, _fbo);


In + (void)setAlephOnePreferences:, set the volume a new way

Remove anything with a comment like: //Still needed for iOS 6-19-24?

Did we need SDL_MouseInit(); for anything?

Remove AlephOneAcceleration files?

Verify the SDL mouse event works in - (void)handleTapFrom:(UITapGestureRecognizer *)recognizer.

Do we need esutils files?

Done?: Check out and see if we need #include "game_window.h"for this line: //Still needed for iOS 6-19-24? mark_shield_display_as_dirty();

Do we need -lavcodec or -lavdevice -lavutil -lavformat -lavfilter or -lvpx or -lswresample -lswscale?
